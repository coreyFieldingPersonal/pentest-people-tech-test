// Imports.
import {vi} from 'vitest'
import { render} from '@testing-library/react'

// Import Mocks.
import { vulnerabilitiesMock } from '../../mocks/vulnerabilityMock'

// To test.
import { VulnerabilitiesPanel } from '.'
import { waitFor } from '@testing-library/react'
import { fetchPaginatedVulnerabilities } from '../../api/fetchPaginatedVulnerabilities'

const vulnerabilityItemMock = vulnerabilitiesMock[0]

function createFetchResponse(data: any) {
  return { json: () => new Promise((resolve) => resolve(data)) }
}

let fetchMock: any = undefined

beforeEach(() => {
    fetchMock = vi.spyOn(global, "fetch")
        .mockImplementation((): any => Promise.resolve(createFetchResponse({ data: { items: [vulnerabilityItemMock] } })));
})

afterEach(() => {
    vi.restoreAllMocks()
})

describe('<VulnerabilitiesPanel />', () => { 
    it("Displays list of vulnerabilities", async () => {
        fetchPaginatedVulnerabilities(0)
        
        const { getByText } = render(<VulnerabilitiesPanel />)

        waitFor(() => {
            expect(fetchMock).toHaveBeenCalled()

            const text = getByText('Outdated PHP')   
            expect(text).toBeInTheDocument()
        })
    })
 })
